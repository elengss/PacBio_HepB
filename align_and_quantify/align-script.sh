#!/bin/bash
### Alignment script using pbmm2
###
### "BMRC" is the name of the server cluster we used for analysis.
### other systems will require local versions of these initiation calls
### This is the call in terminal on our system (slurm interface) :
### sbatch --mem=0 -p short align-script.sh
### The --mem=0 parameter sets memory to the maximum available 
### Local information for BMRC cluster :
echo "------------------------------------------------" 
echo "Run on host: "`hostname` 
echo "Operating system: "`uname -s` 
echo "Username: "`whoami` 
echo "Started at: "`date` 
echo "------------------------------------------------" 
### BMRC specific calls to initiate pbmm2
### load conda
module load Anaconda3/2022.05
eval "$(conda shell.bash hook)"
###
### These next 3 steps only need to be done once
### 1) generate a local conda environment for our programs to reside in
### conda create -n PBMM python=3
### 2) install the pbmm2 program into our local environment
### conda install -c bioconda pbmm2
### set up bash shell to use conda
### This last command may be requested by the script, but is already set
### 3) conda init bash
### Activate the conda environment where pbmm2 was installed
conda activate PBMM
###
### define local paths for reference and data folders
### use the utility "Findhome.sh" to obtain the value for this variable.
home="/gpfs3/well/mckeating/projects/Pacbio-Runs-June-HBV/Home"
echo "Home directory is : "$home
data_dir="$home/data"
ref_dir="$home/reference"
echo "Reference fasta files & gtf files in : "$ref_dir
echo ""
echo "data file names as generated by the PacBio software are :"
echo "demultiplex.dT_bcXXXXRC_PB_3p--dT_PB_5p.hifi_reads.fastq.gz"
echo "Where XXXX is the barcode of the sample being processed"
echo "We therefore set 2 variables, firstbit = demultiplex.dT_bc"
firstbit="demultiplex.dT_bc"
echo "and lastbit = RC_PB_3p--dT_PB_5p.hifi_reads.fastq"
lastbit="RC_PB_3p--dT_PB_5p.hifi_reads.fastq"
echo "(we decompress the .gz file, so the .gz disappears)"
echo "If we define the barcodes in the variable tmp, then the filename can"
echo "be put together in the script as $firstbit$tmp$lastbit"
echo " "
### The following command only needs doing once!
echo "First decompress the PacBio files, this only needs doing once."
echo "There will be a file not found error if this has been done before, ignore it..."
gunzip $data_dir/*.gz
echo " "
echo "Make sure the counter file fastqlines is not already there before starting"
echo "Again, ignore any error message..."
rm $data_dir/fastqlines
echo " "
echo "Starting alignments to HBV :"
### MAP TO HEP B D3L
for tmp in 1002 1003 1010 1012; do 
echo aligning "$tmp" for HBV
date +”%H:%M:%S”
### Count the number of sequences in each file, needed for TPM counts in R script
echo $firstbit$tmp$lastbit
wc -l $data_dir/$firstbit$tmp$lastbit >> $data_dir/fastqlines
### do alignment
pbmm2 align --sort --preset ISOSEQ $ref_dir/D3L.fa $data_dir/$firstbit$tmp$lastbit $data_dir/"$tmp"_D3L.bam; done
### BMRC specific calls to load samtools
module load samtools
### prepare files for R
for tmp in 1002 1003 1010 1012; do
echo making and extracting sam file "$tmp" for HBV
samtools view $data_dir/"$tmp"_D3L.bam -o $data_dir/"$tmp"_D3L.noheader.sam
awk '{print $6}' $data_dir/"$tmp"_D3L.noheader.sam > cigar
awk '{print $5}' $data_dir/"$tmp"_D3L.noheader.sam > mapq
awk '{print $4}' $data_dir/"$tmp"_D3L.noheader.sam > pos
awk '{print $2}' $data_dir/"$tmp"_D3L.noheader.sam > bit
awk '{print $1}' $data_dir/"$tmp"_D3L.noheader.sam > query
paste query mapq bit pos cigar > $data_dir/"$tmp".D3L.short; done
### tidy up files
rm query bit pos mapq cigar
echo " "
date +”%H:%M:%S”
echo " "
echo "Starting alignments to Human :"
### MAP TO HUMAN
for tmp in 1002 1003 1010 1012; do 
pbmm2 align --sort --sort -j 12 -J 4 --preset ISOSEQ $ref_dir/GRCh38.p13.genome.fa $data_dir/$firstbit$tmp$lastbit $data_dir/"$tmp"_prec_iso_fq_human.bam; done
echo " "
date +”%H:%M:%S”
echo " "
echo "Script finished."

